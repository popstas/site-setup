#!/bin/bash

## THIS IS THE SOURCE FOR THE PYTHON LIKE OPTIONS PARSER ## 


# DIRECTIONS:  

############### FLAG AND OPTION PARSING ############### 



# add_flag <flag.name> <flag.short> <Default = True or False> <Description> 

#type:
#add_option <option.name> <option.short> <Default Value> <Description>  (Default Default is None) (Default short is none) 

# <option.name> 
# option.name is also the --long_type 
# A variable in caps OPTION.NAME will be created for each option

# <option.short> 
# Required to be a single letter or 'None'

# Flag are either True or False; The input of a flag changes it from its default value 
# Optn requires an option after the flag 

#Default Types are not restricted

# Description is for the help menu

# Example Add an flag:   add_flag verbose -v False 'This flag turns on verbose mode' 
# Example Add an option: add_option length -l 10 'Choose a length' 

# A command line of:./my_prog -l 20 --verbose 
# would create the variables:
# VERBOSE=True
# LENGTH=20 

##############  POSITIONAL ARGUMENTS PARSING ############

# Positional arguments will be returned in a list: Argv.  
# To enforce a maximum number of positional arguments use:
# add_arglim <max_number>


############### ADDITIONAL OPTIONS (HELP MENU ) ################ 

# add_info allows a help string to be printed out at the help prompt
# add_example will also allow and example to be printed out at help prompt. 



#################################################################################3

function add_arglim {
ARG_LIM=$1; } 


function add_info {
if [ $# -ge 2 ]; then echo 'ERROR: add_info acts on a single text string'; exit; fi 
HELP_INFO=$1; }


function add_example {
if [ $# -ge 2 ]; then echo 'ERROR: add_example acts on a single text string'; exit; fi 
HELP_EXAMPLE=$1
 }



# NEW ADD STYLE: TWO DIFFERENT PROGRAMS!   ADD FLAG AND ADD_OPTION 

# add flag is NAME, short, default 


function add_flag {
if [ $# == 0 ]; then echo 'ERROR: add_flag requires at least one argument'; exit; fi  
if [ $# == 1 ]; then 
	local SHRT='None' 
	local DEF='False' 
fi 

if [ -z $FLAGS_ADDED ]; 
	then 
	FLAGS_ADDED=1 
else
	FLAGS_ADDED=`expr $FLAGS_ADDED + 1`
fi 


if [ $# == 2 ]; then
	if [ $2 == 'True' ] || [ $2 == 'False' ]; then 
		local SHRT='None'
		local DEF=$2
	else
		if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
			local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g')
			local DEF='False' 
		else
			echo 'ERROR: Wrong Flag Input '"$2"
			exit 
		fi 
	fi 
fi 
if [ $# -ge 3 ]; then 
	if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
		local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g')
	else
		echo 'Error: Incorrect Short Form Input: '"$2"
		exit 
	fi 
	if [ $3 == 'True' ] || [ $3 == 'False' ]; then 
		local DEF=$3
	else
		echo 'Error: Flag default can only be True or False '"$3"
		exit 
	fi
fi 
FLAG_DEF[$FLAGS_ADDED]=$DEF
FLAG_NAMES[$FLAGS_ADDED]=$(echo $1 | sed -e 's/\(.*\)/\U\1/')
if [ $SHRT == 'None' ]; then 
	FLAG_SHORT[$FLAGS_ADDED]=
else
	FLAG_SHORT[$FLAGS_ADDED]='-'$SHRT 
fi 
FLAG_LONG[$FLAGS_ADDED]='--'$1 

hput '__'"$(echo $1 | sed -e 's/\(.*\)/\U\1/')" short $SHRT TYPE Flag DEFAULT $DEF
eval $(echo $1 | sed -e 's/\(.*\)/\U\1/')=$DEF

if [ $# == 4 ]; then FLAG_DES[$FLAGS_ADDED]=$4 
else FLAG_DES[$FLAGS_ADDED]='None'  
fi 
if [ $# -ge 5 ]; then 
echo 'Error: add_flag takes at most 4 paramters'
exit 
fi 
}



# add option is NAME, short, default  
	

function add_option { 
if [ $# == 0 ]; then echo 'ERROR: add_option requires at least one argument'; exit; fi  
if [ $# == 1 ]; then 
	local SHRT='None' 
	local DEF='None' 
fi 
if [ -z $OPTS_ADDED ]; 
	then 
	OPTS_ADDED=1 
else
	OPTS_ADDED=`expr $OPTS_ADDED + 1`
fi 
if [ $# == 2 ]; then
	if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
		local DEF='None' 
		local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g') 
	else 
		local SHRT='None'
		local DEF=$2 	
	fi 
fi 

if [ $# -ge 3 ]; then 
	if [ $(echo $2 | sed 's/\(.\).*/\1/g') == '-' ] && [ ${#2} == 2 ]; then
		local SHRT=$(echo $2 | sed 's/.\(.\).*/\1/g')
	else
		echo 'Error: Incorrect Short Form Input: '"$2"
		exit 
	fi 
	local DEF=$3
fi 
OPT_DEF[$OPTS_ADDED]=$DEF
OPT_NAMES[$OPTS_ADDED]=$(echo $1 | sed -e 's/\(.*\)/\U\1/')

if [ $SHRT == 'None' ]; then 
	OPT_SHORT[$OPTS_ADDED]=
else
	OPT_SHORT[$OPTS_ADDED]='-'$SHRT 
fi 
OPT_LONG[$OPTS_ADDED]='--'$1 
hput '__'"$(echo $1 | sed -e 's/\(.*\)/\U\1/')" short $SHRT TYPE Optn DEFAULT $DEF
eval $(echo $1 | sed -e 's/\(.*\)/\U\1/')=$DEF

if [ $# == 4 ]; then OPT_DES[$OPTS_ADDED]=$4 
else OPT_DES[$OPTS_ADDED]='None'  
fi 
if [ $# -ge 5 ]; then 
echo 'Error: add_option takes at most 4 paramters'
exit 
fi 
}




function usage {
	j=0
	echo '' 
	if [ -z != $(echo $HELP_INFO | sed 's/\(.\).*/\1/g') ]; then echo $HELP_INFO ; echo '';fi 
	if [ -z != $(echo $HELP_EXAMPLE | sed 's/\(.\).*/\1/g') ]; then echo $HELP_EXAMPLE ; echo ''; fi 

	if [ -z != $OPTS_ADDED ] && [ -z != $FLAGS_ADDED ]; then 
		echo 'Usage: '"$0"' <'"$ARG_LIM"' positional arguments >  [-options ]  [--flags] ' 
	fi 
	if [ -z != $OPTS_ADDED ] && [ -z $FLAGS_ADDED ]; then 	   
		echo 'Usage: '"$0"' <'"$ARG_LIM"' positional arguments >  [-options ] ' 
	fi 
	if [ -z $OPTS_ADDED ] && [ -z != $FLAGS_ADDED ]; then 
		echo 'Usage: '"$0"' <'"$ARG_LIM"' positional arguments >  [--flags] ' 
	fi 

	if [ -z $OPTS_ADDED ] && [ -z $FLAGS_ADDED ]; then 
		echo 'Usage: '"$0"' <'"$ARG_LIM"' positional arguments >  '
	fi 

	if [ -z != $OPTS_ADDED ]; then 
		echo '' 
		echo 'Options (Require Input):' 
		echo '' 
		printf "%12s " 'NAME'
		printf "%8s " 'SHORT'
		printf "%18s " 'LONG'
		printf "%12s " 'Default'
		printf "%30s " 'Description' 
		echo '' 
		until [ $j -gt $OPTS_ADDED ]
			do 
			printf "%12s " ${OPT_NAMES[$j]}
			printf "%8s " ${OPT_SHORT[$j]}
			printf "%18s " ${OPT_LONG[$j]}
			printf "%12s " ${OPT_DEF[$j]}
			echo -n '            ' 
			printf "%s " ${OPT_DES[$j]} 
			echo '' 
			j=`expr $j + 1`
			done
	fi 
	j=0 
	if [ -z != $FLAGS_ADDED ]; then 
		echo ''; echo '' 
		echo 'Flags (Boolean):' 
		echo '' 
		printf "%12s " 'NAME'
		printf "%8s " 'SHORT'
		printf "%18s " 'LONG'
		printf "%12s " 'Default'
		printf "%30s " 'Description' 
		echo '' 
		until [ $j -gt $FLAGS_ADDED ]
			do 
			printf "%12s " ${FLAG_NAMES[$j]}
			printf "%8s " ${FLAG_SHORT[$j]}
			printf "%18s " ${FLAG_LONG[$j]}
			printf "%12s " ${FLAG_DEF[$j]}
			echo -n '            ' 
			printf "%s " ${FLAG_DES[$j]} 			
			echo '' 
			j=`expr $j + 1`
			done
	fi 
	exit 
}

hput() {
    eval "$1"='$1...$3...$5...$7'
    eval "$3"='$1'
    eval "$1""$2"='$3' 
    eval "$1""$4"='$5'    
    eval "$1""$6"='$7'
}

hget() {
    eval echo '${'"$1"'#hash}'		
}



function parseargs {
	Argc=0
	if [ $# == 0 ]; then 
		echo 'Empty args'
		usage 
		exit 
		fi 
	until [ -z "$1" ]  # Until all parameters used up . . .
	do
		if [ $1 == '--help' ] || [ $1 == '-h' ]; then usage; fi 
		if [ -z != $ARG ];
			then 
			VAR=$(echo $CURRENT_OPTION | sed 's/..\(.*\)/\1/g') 
			if [ $(echo $1 | sed 's/\(.\).*/\1/g') == '-' ];
				then 
				echo 'ERROR: An argument is required for this option: '"$VAR" 
				echo ''
				usage 
				exit 
			else 
				eval $VAR=$1
				ARG=
				CURRENT_OPTION=
				shift 
				continue 
			fi	
		else
			if [ $(echo $1 | sed 's/\(.\).*/\1/g') != '-' ];
				then 
				Argc=`expr $Argc + 1`
				Argv[$Argc]=$1 
			else
				if [ $(echo $1 | sed 's/.\(.\).*/\1/g') == '-' ];
					then 
					CURRENT_OPTION=$(echo $1 | sed 's/--/__/' | sed -e 's/\(.*\)/\U\1/')
					if [ -z $(echo `hget "$CURRENT_OPTION"`) ]; then
						echo 'ERROR: The long form option: '"$1"' is undeclared';
						echo '' 
						usage  
						exit 
					fi
				else 
					CURRENT_OPTION=$(echo `hget $(echo $1 | sed 's/.\(.*\)/\1/g')`)
					if [ -z "$CURRENT_OPTION" ]; then
						echo 'ERROR: The short form option: '"$1"' is undeclared'
						echo '' 
						usage 
						exit 
					fi  
				fi			
				if [ $(echo `hget "$CURRENT_OPTION""TYPE"`) == Flag ]; then
					VAR=$(echo $CURRENT_OPTION | sed 's/..\(.*\)/\1/g')
					#echo $VAR 
					if [ $(echo `hget "$CURRENT_OPTION""DEFAULT"`) == True ]; then eval $VAR=False; fi 
					if [ $(echo `hget "$CURRENT_OPTION""DEFAULT"`) == False ]; then eval $VAR=True; fi   
					CURRENT_OPTION= 
				else
					ARG=True
				fi 
			fi
	 	
	shift	
		fi 
	done 
	if [ -z != $CURRENT_OPTION ]; 
		then 
		VAR=$(echo $CURRENT_OPTION | sed 's/..\(.*\)/\1/g') 
		echo 'ERROR: An argument is required for this option: '"$VAR" 
		usage 
		exit 
	fi 

	if [ -z != $ARG_LIM ]; 
		then  
		if [ $Argc -gt $ARG_LIM ]; 
		then 
			echo 'ERROR: Positional Arguments Exceed Maximum Limit ('"$ARG_LIM"')' 
			echo '' 
			usage 
			exit
		fi 
   	fi 
}







 

