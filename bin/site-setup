#!/bin/bash
# 15.12.2010
# 13.03.2014
# 02.07.2014
# 21.07.2014
# 11.12.2014 - added mailto2
# 03.04.2015 - optional DB
# 25.08.2015 - drush make
# 27.08.2015 - installer & config
# 29.08.2015 - site-setup-engine
# 30.08.2015 - tests
#
################################################################

script_version=1.1.0

command -v "user-setup" >/dev/null 2>&1 || {
	echo >&2 "site-setup requires server-scripts"
	exit 1
}

. /usr/share/site-setup/lib/optparse

add_arglim 0
add_option config -c "" "Bash-style config, one parameter per line, = delimeter"
add_option domain -d None "Site main domain"
add_option domain_test -t None "Site test domain"
add_option user -u "" "Site user"
add_option db -b "" "DB name"
add_option db_source -j "" "DB name"
add_option db_pass -p "" "DB password"
# None required for engine
add_option engine -i None "Engine source (tgz url, tgz file or directory), default: empty"
add_option script -s "" "Setup script"
add_option drupal_profile -r "minimal" "Drupal installation profile, default: minimal"

add_flag rewrite -r False "Purge installed site before install"

add_flag verbose -v False "Verbose output"
add_flag debug -m False "Debug"

add_info "Site install script v$script_version"
add_example "$0 --user username --db db_name --domain example.com --engine /path/to/engine --db_pass SDLFksdfoi90wf9 --script drupal-setup --rewrite"


# variables from optparse
DOMAIN="$DOMAIN"
DOMAIN_TEST="$DOMAIN_TEST"
USER="$USER"
DB="$DB"
DB_SOURCE="$DB_SOURCE"
DB_PASS="$DB_PASS"
ENGINE="$ENGINE"
SCRIPT="$SCRIPT"
VERBOSE="$VERBOSE"
DEBUG="$DEBUG"


# variables from config
mailto="$mailto"
mailto2="$mailto2"
tmpldir="$tmpldir"
homedir="$homedir"
wwwdir="$wwwdir"
sitedir="$sitedir"
sitedir_old="$sitedir_old"
nginxfile="$nginxfile"
nginxfileen="$nginxfileen"
apachefile="$apachefile"
apachefileen="$apachefileen"
skeldir="$skeldir"
configdir="$configdir"

exit_command() {
	rm -rf "$skeldir"
	bell
}





# 1. system user
site_setup_user() {
	USER="$USER"
	homedir="$homedir"

	if [ $(getent passwd "$USER" | wc -l) = 0 ] || [ ! -d "$homedir" ]; then
		is_verbose && echo "useradd --create-home --shell=/bin/bash $USER"
		useradd --create-home --shell=/bin/bash "$USER"

		mkdir -p "$homedir/log"
		mkdir -p "$wwwdir"
		mkdir -p "$homedir/.cache"
		mkdir -p "$homedir/.config"
		mkdir -p "$homedir/.local"
		mkdir -p "$homedir/.ssh"
		touch "$homedir/.ssh/authorized_keys"

		ssh-add-keys "$USER"

		user-setup "$USER" www > /dev/null
	else
		echo "$USER exists, skip user creation"
	fi
}






# 2. extract engine files
# moved to script





# 3. apache config
site_setup_apache() {
	tmpldir="$tmpldir"
	sitedir="$sitedir"
	DOMAIN="$DOMAIN"
	DOMAIN_TEST="$DOMAIN_TEST"
	USER="$USER"
	apachefile="$apachefile"

	tempfile=$(mktemp -t site-setup-apache-XXXX)
	cp "$tmpldir/site_apache.conf" "$tempfile"
	sed -i "s|{domain}|$DOMAIN|g" "$tempfile"
	sed -i "s|{sitedir}|$sitedir|g" "$tempfile"
	sed -i "s|{uid}|$USER|g" "$tempfile"
	sed -i "s|{gid}|$USER|g" "$tempfile"
	if [ "$DOMAIN_TEST" != None ]; then
		sed -i "s|{domain_test}| $DOMAIN_TEST|g" "$tempfile"
	else
		sed -i "s|{domain_test}||g" "$tempfile"
	fi

	mv "$tempfile" "$apachefile"
	ln -s "$apachefile" "$apachefileen" > /dev/null 2>&1 || true
}





# 4. nginx config
# moved to script





# 5. database
site_setup_database() {
	USER="$USER"
	DB="$DB"
	DB_PASS="$DB_PASS"
	REWRITE="$REWRITE"
	tmpldir="$tmpldir"

	if [ -z "$DB" ]; then
		echo "skip database creation"
		return 0
	fi

	if [ "$REWRITE" = True ]; then
		# если уже есть, бекапим
		testdb=$(mysql -Brs --execute="SHOW DATABASES LIKE '$DB'")
		if [ "$testdb" = "$DB" ]; then
			if [ "$DEBUG" = True ]; then
				is_verbose && echo "not backup old database"
			else
				is_verbose && echo "backup and drop database $DB..."
				dbdump "$DB" > /dev/null 2>&1
			fi
			is_verbose && echo "DROP DATABASE $DB;" | mysql
			#echo "CREATE DATABASE $DB;" | mysql
		fi
	fi

	cp "$tmpldir/mysql.sql" "$tmpldir/mysql.sql.tmp"
	sed -i "s|{db}|$DB|g" "$tmpldir/mysql.sql.tmp"
	sed -i "s|{user}|$USER|g" "$tmpldir/mysql.sql.tmp"
	sed -i "s|{db_pass}|$DB_PASS|g" "$tmpldir/mysql.sql.tmp"
	is_verbose && cat "$tmpldir/mysql.sql.tmp"
	mysql < "$tmpldir/mysql.sql.tmp"
	rm "$tmpldir/mysql.sql.tmp"

	if [ "$DB_SOURCE" != "" ]; then
		# TODO: копируем базу
		mysqldump "$DB_SOURCE" | mysql "$DB"
	fi
}






# 6. domain config
# moved to script





# 7. setup script
site_setup_script() {
	SCRIPT="$SCRIPT"
	DOMAIN="$DOMAIN"
	sitedir="$sitedir"
	USER="$USER"
	DB="$DB"
	DB_PASS="$DB_PASS"
	DRUPAL_PROFILE="$DRUPAL_PROFILE"
	logfile="$logfile"
	DEBUG="$DEBUG"
	VERBOSE="$VERBOSE"

	skeldir="$skeldir"

	if [ "$SCRIPT" != "" ]; then
		is_verbose && echo start setup script
		if [ "$SCRIPT" = "drupal" ]; then
			SCRIPT="drupal-setup"
		fi

		if [ ! -f "$SCRIPT" ] && [ command -v "$SCRIPT" >/dev/null 2>&1 ]; then
			is_verbose && echo "$SCRIPT not found! exit"
			exit 1
		fi
		SCRIPT=$(which "$SCRIPT")

		# файлы, недоступные скрипту установки копируем в папку сайта
		mkdir -p "$skeldir/sites/all/modules"
		cp -r /usr/local/drupal/config/ "$skeldir"
		cp -r /usr/local/drupal/patches/ "$skeldir"
		cp -r /usr/local/drupal/libraries/ "$skeldir/sites/all"
		cp -r /usr/local/drupal/features/ "$skeldir/sites/all/modules/features_viasite"
		cp -r /usr/local/drupal/modules/ "$skeldir/sites/all/modules"
		cp -r /usr/local/drupal/themes/ "$skeldir/sites/all"

		echo "chown -R $USER:$USER $sitedir"
		chown -R "$USER":"$USER" "$sitedir"

		command="$SCRIPT $DOMAIN --sitedir $sitedir --user $USER --db_pass $DB_PASS --db $DB --logfile $logfile --drupal_profile $DRUPAL_PROFILE"
		if [ "$DEBUG" = True ]; then command="$command --debug"; fi
		if [ "$VERBOSE" = True ]; then command="$command --verbose"; fi
		is_verbose && echo su -c \"$command\" "$USER"
		su -c "$command" "$USER"

	else
		is_verbose && echo "no script defined"
	fi
}




variables_init() {
	set -eu

	CONFIG="$CONFIG"
	if [ -n "$CONFIG" ]; then
		config_parse "$CONFIG"
	fi

	# include init only after parse args and config!
	. /usr/share/site-setup/lib/init
}

config_parse() {
	config_file="$1"

	# config from directory
	if [ -f "$configdir/$config_file" ]; then
		config_file="$configdir/$config_file"
	fi

	if [ ! -f "$config_file" ]; then
		echo "Config file '$config_file' not found, aborting."
		exit 1
	fi

	for line in $(cat "$config_file" | grep -v "^#"); do
		if [ $(echo "$line" | grep -c "=") != 1 ]; then
			continue
		fi
		name=$(echo "$line" | cut -d'=' -f1 | tr '[:lower:]' '[:upper:]')
		value=$(echo "$line" | cut -d'=' -f2)
		eval "$name=\"$value\""
	done
}





main() {
	start_time=$(date +%s)

	color1='\e[1;37m'
	color2='\e[0;37m'
	NC='\e[0m' # No Color

	if [ $# = 0 ]; then
		usage
	fi

	parseargs $@
	variables_init "$@"

	if [ -z "$DB" ] && [ "$ENGINE" != None ]; then
		echo "db not set"
		usage
	fi

	if [ -z "$USER" ]; then
		echo "user not defined"
		exit 1
	fi

	if [ -z "$DOMAIN" ]; then
		echo "domain not defined"
		exit 1
	fi

	if [ -z "$DB_PASS" ]; then
		DB_PASS=$(get_password 16)
	fi

	logfile=$(mktemp -t site-setup-log-XXXX)
	trap 'rm "$logfile"' EXIT
	trap 'exit_command' EXIT

	################### steps

	echo -e "${color1}# 1. system user${NC}"
	site_setup_user

	# тут юзер точно создан
	chown "$USER":"$USER" "$logfile"

	echo -e "\n${color1}# 2. engine${NC}"
	command_args=""
	if [ "$REWRITE" = True ]; then command_args="$command_args --rewrite"; fi
	if [ "$DEBUG" = True ]; then command_args="$command_args --debug"; fi
	if [ "$VERBOSE" = True ]; then command_args="$command_args --verbose"; fi
	if [ -n "$DB_SOURCE" ]; then command_args="$command_args --db_source $DB_SOURCE"; fi
	if [ -n "$DB_PASS" ]; then command_args="$command_args --db_pass $DB_PASS"; fi
	site-setup-engine --engine "$ENGINE" --user "$USER" --domain "$DOMAIN" $command_args

	echo -e "\n${color1}# 3. apache config${NC}"
	site_setup_apache

	echo -e "\n${color1}# 4. nginx config${NC}"
	site-setup-nginx --domain "$DOMAIN" --domain_test "$DOMAIN_TEST" --sitedir "$sitedir"

	reload-web > /dev/null 2>&1

	echo -e "\n${color1}# 5. database${NC}"
	site_setup_database

	echo -e "\n${color1}# 6. domain${NC}"
	site-setup-domain --domain "$DOMAIN"

	echo -e "\n${color1}# 7. setup script${NC}"
	site_setup_script

	################### end of steps

	if [ "$VERBOSE" = True ]; then
		echo ""
		echo "##################################################"
		echo ""
		echo "for uninstall:"
		echo "rm $nginxfile"
		echo "rm $nginxfileen"
		echo "rm $apachefile"
		echo "rm $apachefileen"
		echo "reload-web"
		echo "rm -rf $sitedir"
		if [ -n "$DB" ]; then
			echo "mysql --execute=\"DROP DATABASE $DB\""
		fi
		if [ $(ls "$wwwdir" | wc -l) = "1" ]; then
			echo deluser "$USER"
			echo rm -rf "$homedir"
		fi
		echo ""
		echo "##################################################"
		echo ""
	fi

	echo "domain: $DOMAIN" >> "$logfile"
	echo "site root: $sitedir" >> "$logfile"
	if [ -n "$DB" ]; then
		echo "mysql database: $DB" >> "$logfile"
		echo "mysql password: $DB_PASS" >> "$logfile"
	fi

	if [ "$SCRIPT" != "drupal" ]; then
		echo "for cron exec: cd $sitedir && drs cron-add"
	fi

	if [ "$DEBUG" != True ]; then
		body="[site-setup] $DOMAIN passwords"
		if [ -n "$mailto" ]; then
			mail -s "$body" "$mailto" < "$logfile" && echo "email sent to $mailto"
		fi

		if [ -n "$mailto2" ]; then
			mail -s "$body" "$mailto2" < "$logfile" && echo "email sent to $mailto2"
		fi
	fi
	echo ""

	cat "$logfile"

	end_time=$(date +%s)
	runtime=$((end_time-start_time))
	echo "finished at $runtime seconds"
}

main "$@"
