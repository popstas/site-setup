#!/bin/bash
# 15.12.2010
# 13.03.2014
# 02.07.2014
# 21.07.2014
# 11.12.2014 - added mailto2
# 03.04.2015 - optional DB
# 25.08.2015 - drush make
# 27.08.2015 - installer & config
# v1.0.0
#
################################################################

script_version=1.0.0

if [ ! command -v $SCRIPT >/dev/null 2>&1 ]; then
	echo >&2 "site-setup requires server-scripts"
	exit 1
fi

. /usr/share/site-setup/lib/optparse

add_arglim 0
add_option domain -d None "Site main domain"
add_option domain_test -t None "Site test domain"
add_option user -u "" "Site user"
add_option db -b "" "DB name"
add_option db_source -j "" "DB name"
add_option db_pass -p None "DB password"
add_option engine -i None "Engine source (tgz url, tgz file or directory), default: empty"
add_option script -s "" "Setup script"
#add_option config -c "" "Configuration file"
add_option drupal_profile -r "minimal" "Drupal installation profile, default: minimal"

add_flag rewrite -r False "Purge installed site before install"
add_flag no_reinstall -o False "No purge or install site"

add_flag verbose -v False "Verbose output"
add_flag debug -m False "Debug"

add_info "Site install script v$script_version"
add_example "$0 --user username --db db_name --domain example.com --engine /path/to/engine --db_pass SDLFksdfoi90wf9 --script drupal-setup --rewrite"

parseargs $@
# include init only after parse args!
. /usr/share/site-setup/lib/init

if [ $# = 0 ]; then
	usage
fi

if [ -z "$DB" ] && [ "$ENGINE" != "None" ]; then
	echo "db not set"
	usage
fi

if [ "$REWRITE" = True ] && [ "$NO_REINSTALL" = True ]; then
	echo "--rewrite и --no_reinstall взаимоисключают друг друга"
	exit 1
fi

start_time=$(date +%s)

if [ "$DB_PASS" = None ]; then
	DB_PASS=$(get_password 16)
fi
#admin_pass=$(get_password 10)
isdrupal=0

color1='\e[1;37m'
color2='\e[0;37m'
NC='\e[0m' # No Color

logfile=$(mktemp -t site-setup-log-XXXX)
settings_php=$(mktemp -t site-setup-settings_php-XXXX)

function exit_command {
	rm "$logfile"
	rm "$settings_php"
	rm -rf "$skeldir"
	bell
	exit 1
}

trap 'exit_command' EXIT

# 1. system user
function site_setup_user {
	if [ ! -d "$homedir" ]; then
		USER="$USER"
		homedir="$homedir"

		isnewuser=1
		if [ -d "$homedir" ]; then
			isnewuser=0
			is_verbose && echo "directory $homedir exists, don't create user."
		fi

		if [ $isnewuser = "1" ]; then
			#user_pass=$(get_password 16)
			#echo "please, enter password twice, generated password: ${color1}$user_pass${NC}"

			is_verbose && echo "useradd --create-home --shell=/bin/bash $USER"
			#adduser $USER
			useradd --create-home --shell=/bin/bash $USER

			mkdir -p $homedir/log
			mkdir -p $wwwdir
			mkdir -p $homedir/.cache
			mkdir -p $homedir/.config
			mkdir -p $homedir/.local
			mkdir -p $homedir/.ssh
			touch $homedir/.ssh/authorized_keys

			ssh-add-keys $USER

			user-setup $USER www > /dev/null
		fi
	else
		echo "$homedir exists, skip user creation"
	fi
}






# 2. extract engine files
function site_setup_engine {
	USER="$USER"
	REWRITE="$REWRITE"
	sitedir="$sitedir"
	sitedir_old="$sitedir_old"
	DEBUG="$DEBUG"
	ENGINE="$ENGINE"
	DB_SOURCE="$DB_SOURCE"
	DB_PASS="$DB_PASS"
	homedir="$homedir"

	if [ "$REWRITE" = True ]; then
		if [ -d "$sitedir_old" ]; then
			is_verbose && echo rm -rf $sitedir_old
			rm -rf $sitedir_old
		fi
		
		if [ -d "$sitedir" ]; then
			if [ "$DEBUG" = True ]; then
				echo rm -rf $sitedir
				rm -rf $sitedir
				#is_verbose && echo "old site not deleted"
			else
				is_verbose && echo "move old site to $sitedir_old"
				is_verbose && echo mv $sitedir $sitedir_old
				mv $sitedir $sitedir_old
			fi
		fi
	fi

	if [ "$REWRITE" != True ] && [ "$NO_REINSTALL" != True ] && [ -d "$sitedir" ]; then
		echo "Directory $sitedir exists, do nothing."
		echo "If you need to rewrite or update site, use --rewrite or --no_reinstall options"
		exit 1
	fi

	mkdir -p $sitedir

	# empty engine
	if [ "$ENGINE" = "None" ]; then
		# ничего не делаем
		is_verbose && echo "empty engine"
		cd $sitedir

	# latest drupal
	elif [ "$ENGINE" = "drupal" ]; then
		is_verbose && echo "drush dl drupal --drupal-project-rename=$DOMAIN"
		cd $wwwdir
		rmdir $sitedir
		drush dl drupal --drupal-project-rename=$DOMAIN
		cd $sitedir

	# drush makefile
	elif [ $(echo "$ENGINE" | grep -c ".yml") = 1 ]; then
		is_verbose && echo "drush7 make $ENGINE $DOMAIN"
		cd $wwwdir
		rmdir $sitedir
		drush7 make $ENGINE $DOMAIN
		cd $sitedir

	# tar.gz archive
	elif [ -f "$ENGINE" ]; then
		is_verbose && echo "extract local archive"
		cd $sitedir
		tar -xf $ENGINE

	# directory
	elif [ -d "$ENGINE" ]; then
		if [ "$NO_REINSTALL" = True ] && [ -f "$sitedir/sites/default/settings.php" ]; then
			is_verbose && echo "backup old settings.php"
			cat $sitedir/sites/default/settings.php > $settings_php
		fi

		is_verbose && echo rsync --one-file-system --recursive --delete "$ENGINE/" $sitedir
		rsync --one-file-system --recursive --delete "$ENGINE/" $sitedir

		if [ "$NO_REINSTALL" = True ] && [ -f "$sitedir/sites/default/settings.php" ]; then
			is_verbose && echo "restore settings_oldinstall.php"
			cp $settings_php $sitedir/sites/default/settings_oldinstall.php
		fi

		# замена доступов к БД в settings.php
		if [ "$DB_SOURCE" != "" ] && [ -f "$sitedir/sites/default/settings.php" ]; then
			is_verbose && echo "replace db access in settings.php"
			sed -i "s/'database' => '$DB_SOURCE'/'database' => '$DB'/g" $sitedir/sites/default/settings.php
			sed -i "s/'username' => '$DB_SOURCE'/'username' => '$USER'/g" $sitedir/sites/default/settings.php
			sed -i "s/'password' => '.*'/'password' => '$DB_PASS'/g" $sitedir/sites/default/settings.php
		fi

		cd $sitedir

	# remote ssh path like user@example.com:/home/example/www/example.com
	elif [ $(echo "$ENGINE" | grep "@") != "" ]; then
		echo rsync --recursive --delete "$ENGINE/" $sitedir
		rsync --recursive --delete "$ENGINE/" $sitedir

		if [ "$NO_REINSTALL" = True ] && [ -f "$sitedir/sites/default/settings.php" ]; then
			is_verbose && echo "restore settings_oldinstall.php"
			cp $settings_php $sitedir/sites/default/settings_oldinstall.php
		fi

		# замена доступов к БД в settings.php
		if [ "$DB_SOURCE" != "" ] && [ -f "$sitedir/sites/default/settings.php" ]; then
			is_verbose && echo "replace db access in settings.php"
			sed -i "s/'database' => '$DB_SOURCE'/'database' => '$DB'/g" $sitedir/sites/default/settings.php
			sed -i "s/'username' => '$DB_SOURCE'/'username' => '$USER'/g" $sitedir/sites/default/settings.php
			sed -i "s/'password' => '.*'/'password' => '$DB_PASS'/g" $sitedir/sites/default/settings.php
		fi

		cd $sitedir

	# url to tar.gz archive
	else
		is_verbose && echo "download engine"
		wget -O /distrib/engine.tar.gz $ENGINE
		cd $sitedir
		tar -xf /distrib/engine.tar.gz
	fi

	if [ "$ENGINE" = "drupal" ]; then
		mkdir -p "$homedir/drush-backups"
	fi

	is_debug && touch "$sitedir/.excluded"

	chown -R $USER.$USER "$sitedir"
	find "$sitedir" -type d -exec chmod 755 {} \;
	find "$sitedir" -type f -exec chmod 644 {} \;
}





# 3. apache config
function site_setup_apache {
	tmpldir="$tmpldir"
	sitedir="$sitedir"
	DOMAIN="$DOMAIN"
	DOMAIN_TEST="$DOMAIN_TEST"
	USER="$USER"
	apachefile="$apachefile"

	tempfile=$(mktemp -t site-setup-apache-XXXX)
	cp $tmpldir/site_apache.conf $tempfile
	sed -i "s|{domain}|$DOMAIN|g" $tempfile
	sed -i "s|{sitedir}|$sitedir|g" $tempfile
	sed -i "s|{uid}|$USER|g" $tempfile
	sed -i "s|{gid}|$USER|g" $tempfile
	if [ "$DOMAIN_TEST" != None ]; then
		sed -i "s|{domain_test}| $DOMAIN_TEST|g" $tempfile
	else
		sed -i "s|{domain_test}||g" $tempfile
	fi

	mv "$tempfile" "$apachefile"
	ln -s "$apachefile" "$apachefileen" > /dev/null 2>&1
}





# 4. nginx config
# moved to script





# 5. database
function site_setup_database {
	USER="$USER"
	DB="$DB"
	DB_PASS="$DB_PASS"
	REWRITE="$REWRITE"
	tmpldir="$tmpldir"

	if [ -z "$DB" ]; then
		echo "skip database creation"
		return 0
	fi

	if [ "$REWRITE" = True ]; then
		# если уже есть, бекапим
		testdb=$(mysql -Brs --execute="SHOW DATABASES LIKE '$DB'")
		if [ "$testdb" = "$DB" ]; then
			if [ "$DEBUG" = True ]; then
				is_verbose && echo "not backup old database"
			else
				is_verbose && echo backup and drop database $DB...
				dbdump $DB > /dev/null 2>&1
			fi
			is_verbose && echo "DROP DATABASE $DB;" | mysql
			#echo "CREATE DATABASE $DB;" | mysql
		fi
	fi

	cp $tmpldir/mysql.sql $tmpldir/mysql.sql.tmp
	sed -i "s|{db}|$DB|g" $tmpldir/mysql.sql.tmp
	sed -i "s|{user}|$USER|g" $tmpldir/mysql.sql.tmp
	sed -i "s|{db_pass}|$DB_PASS|g" $tmpldir/mysql.sql.tmp
	is_verbose && cat $tmpldir/mysql.sql.tmp
	mysql < $tmpldir/mysql.sql.tmp
	rm $tmpldir/mysql.sql.tmp

	if [ "$DB_SOURCE" != "" ]; then
		# TODO: копируем базу
		mysqldump $DB_SOURCE | mysql $DB
	fi
}






# 6. domain config
# moved to script





# 7. setup script
function site_setup_script {
	SCRIPT="$SCRIPT"
	DOMAIN="$DOMAIN"
	sitedir="$sitedir"
	USER="$USER"
	DB="$DB"
	DB_PASS="$DB_PASS"
	DRUPAL_PROFILE="$DRUPAL_PROFILE"
	logfile="$logfile"
	DEBUG="$DEBUG"
	VERBOSE="$VERBOSE"

	if [ "$SCRIPT" != "" ]; then
		is_verbose && echo start setup script
		if [ "$SCRIPT" = "drupal" ]; then
			SCRIPT=/usr/local/bin/drupal-setup
		fi

		if [ ! -f "$SCRIPT" ] && [ command -v $SCRIPT >/dev/null 2>&1 ]; then
			is_verbose && echo "$SCRIPT not found! exit"
			exit 1
		fi

		# файлы, недоступные скрипту установки копируем в папку сайта
		mkdir -p $skeldir/sites/all/modules
		cp -r /usr/local/drupal/config/ $skeldir
		cp -r /usr/local/drupal/patches/ $skeldir
		cp -r /usr/local/drupal/libraries/ $skeldir/sites/all
		cp -r /usr/local/drupal/features/ $skeldir/sites/all/modules/features_viasite
		cp -r /usr/local/drupal/modules/ $skeldir/sites/all/modules
		cp -r /usr/local/drupal/themes/ $skeldir/sites/all

		echo "chown -R $user:$user $sitedir"
		chown -R $USER:$USER $sitedir

		command="$SCRIPT $DOMAIN --sitedir $sitedir --user $USER --db_pass $DB_PASS --db $DB --logfile $logfile --drupal_profile $DRUPAL_PROFILE"
		if [ "$DEBUG" = True ]; then command="$command --debug"; fi
		if [ "$VERBOSE" = True ]; then command="$command --verbose"; fi
		if [ "$NO_REINSTALL" = True ]; then command="$command --no_reinstall"; fi
		is_verbose && echo su -c \"$command\" $USER
		su -c "$command" $USER

	else
		is_verbose && echo "no script defined"
	fi
}








main() {
	echo -e "${color1}# 1. system user${NC}"
	site_setup_user

	# тут юзер точно создан
	chown $USER:$USER $logfile
	chown $USER:$USER $settings_php

	echo -e "\n${color1}# 2. extract engine files${NC}"
	site_setup_engine

	if [ "$NO_REINSTALL" != True ]; then
		echo -e "\n${color1}# 3. apache config${NC}"
		site_setup_apache

		echo -e "\n${color1}# 4. nginx config${NC}"
		site-setup-nginx --domain "$DOMAIN" --domain_test "$DOMAIN_TEST" --sitedir "$sitedir"

		reload-web > /dev/null 2>&1

		echo -e "\n${color1}# 5. database${NC}"
		site_setup_database

		echo -e "\n${color1}# 6. domain${NC}"
		site-setup-domain --domain $DOMAIN
	fi

	echo -e "\n${color1}# 7. setup script${NC}"
	site_setup_script


	if [ "$NO_REINSTALL" != True ]; then
		if [ "$VERBOSE" = True ]; then
			echo ""
			echo "##################################################"
			echo ""
			echo "for uninstall:"
			echo "rm $nginxfile"
			echo "rm $nginxfileen"
			echo "rm $apachefile"
			echo "rm $apachefileen"
			echo "reload-web"
			echo "rm -rf $sitedir"
			if [ -n "$DB" ]; then
				echo "mysql --execute=\"DROP DATABASE $DB\""
			fi
			if [ $(ls $wwwdir | wc -l) = "1" ]; then
				echo deluser $USER
				echo rm -rf $homedir
			fi
			echo ""
			echo "##################################################"
			echo ""
		fi

		#echo created user $USER with password $user_pass
		echo "domain: $DOMAIN" >> $logfile
		echo "site root: $sitedir" >> $logfile
		echo "mysql database: $DB" >> $logfile
		echo "mysql password: $DB_PASS" >> $logfile

		if [ "$SCRIPT" != "drupal" ]; then
			echo "for cron exec: cd $sitedir && drs cron-add"
		fi

		if [ "$DEBUG" != True ]; then
			body="[site-setup] $DOMAIN passwords"
			if [ -n "$mailto" ]; then
				mail -s "$body" $mailto < $logfile
				echo email sent to $mailto
			fi

			if [ -n "$mailto2" ]; then
				mail -s "$body" $mailto2 < $logfile
				echo email sent to $mailto2
			fi
		fi
		echo ""

		cat $logfile
	fi

	end_time=$(date +%s)
	runtime=$((end_time-start_time))
	echo finished at $runtime seconds
}

main "$@"
